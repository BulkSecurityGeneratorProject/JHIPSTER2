{"version":3,"file":"main.ac5bb2e5af3e71855d0d.hot-update.js","sources":["webpack:///./src/main/webapp/app/entities/cliente/cliente.tsx"],"sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link, RouteComponentProps } from 'react-router-dom';\nimport { Button, Col, Row, Table } from 'reactstrap';\n// tslint:disable-next-line:no-unused-variable\nimport { Translate, ICrudGetAllAction, getSortState, IPaginationBaseState, getPaginationItemsNumber, JhiPagination } from 'react-jhipster';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { IRootState } from 'app/shared/reducers';\nimport { getEntities } from './cliente.reducer';\nimport { ICliente } from 'app/shared/model/cliente.model';\n// tslint:disable-next-line:no-unused-variable\nimport { APP_DATE_FORMAT, APP_LOCAL_DATE_FORMAT } from 'app/config/constants';\nimport { ITEMS_PER_PAGE } from 'app/shared/util/pagination.constants';\n\nexport interface IClienteProps extends StateProps, DispatchProps, RouteComponentProps<{ url: string }> {}\n\nexport type IClienteState = IPaginationBaseState;\n\nexport class Cliente extends React.Component<IClienteProps, IClienteState> {\n  state: IClienteState = {\n    ...getSortState(this.props.location, ITEMS_PER_PAGE)\n  };\n\n  componentDidMount() {\n    this.getEntities();\n  }\n\n  sort = prop => () => {\n    this.setState(\n      {\n        order: this.state.order === 'asc' ? 'desc' : 'asc',\n        sort: prop\n      },\n      () => this.sortEntities()\n    );\n  };\n\n  sortEntities() {\n    this.getEntities();\n    this.props.history.push(`${this.props.location.pathname}?page=${this.state.activePage}&sort=${this.state.sort},${this.state.order}`);\n  }\n\n  handlePagination = activePage => this.setState({ activePage }, () => this.sortEntities());\n\n  getEntities = () => {\n    const { activePage, itemsPerPage, sort, order } = this.state;\n    this.props.getEntities(activePage - 1, itemsPerPage, `${sort},${order}`);\n  };\n\n  render() {\n    const { clienteList, match, totalItems } = this.props;\n    return (\n      <div>\n        <h2 id=\"cliente-heading\">\n          <Translate contentKey=\"ghostceetApp.cliente.home.title\">Clientes</Translate>\n          <Link to={`${match.url}/new`} className=\"btn btn-primary float-right jh-create-entity\" id=\"jh-create-entity\">\n            <FontAwesomeIcon icon=\"plus\" />\n            &nbsp;\n            <Translate contentKey=\"ghostceetApp.cliente.home.createLabel\">Create new Cliente</Translate>\n          </Link>\n        </h2>\n        <div className=\"table-responsive\">\n          <Table responsive>\n            <thead>\n              <tr>\n                <th className=\"hand\" onClick={this.sort('id')}>\n                  <Translate contentKey=\"global.field.id\">ID</Translate> <FontAwesomeIcon icon=\"sort\" />\n                </th>\n                <th className=\"hand\" onClick={this.sort('numeroDocumento')}>\n                  <Translate contentKey=\"ghostceetApp.cliente.numeroDocumento\">Numero Documento</Translate> <FontAwesomeIcon icon=\"sort\" />\n                </th>\n                <th className=\"hand\" onClick={this.sort('primerNombre')}>\n                  <Translate contentKey=\"ghostceetApp.cliente.primerNombre\">Primer Nombre</Translate> <FontAwesomeIcon icon=\"sort\" />\n                </th>\n                <th className=\"hand\" onClick={this.sort('segundoNombre')}>\n                  <Translate contentKey=\"ghostceetApp.cliente.segundoNombre\">Segundo Nombre</Translate> <FontAwesomeIcon icon=\"sort\" />\n                </th>\n                <th className=\"hand\" onClick={this.sort('primerApellido')}>\n                  <Translate contentKey=\"ghostceetApp.cliente.primerApellido\">Primer Apellido</Translate> <FontAwesomeIcon icon=\"sort\" />\n                </th>\n                <th className=\"hand\" onClick={this.sort('segundoApellido')}>\n                  <Translate contentKey=\"ghostceetApp.cliente.segundoApellido\">Segundo Apellido</Translate> <FontAwesomeIcon icon=\"sort\" />\n                </th>\n                <th>\n                  <Translate contentKey=\"ghostceetApp.cliente.documento\">Documento</Translate> <FontAwesomeIcon icon=\"sort\" />\n                </th>\n                <th />\n              </tr>\n            </thead>\n            <tbody>\n              {clienteList.map((cliente, i) => (\n                <tr key={`entity-${i}`}>\n                  <td>\n                    <Button tag={Link} to={`${match.url}/${cliente.id}`} color=\"link\" size=\"sm\">\n                      {cliente.id}\n                    </Button>\n                  </td>\n                  <td>{cliente.numeroDocumento}</td>\n                  <td>{cliente.primerNombre}</td>\n                  <td>{cliente.segundoNombre}</td>\n                  <td>{cliente.primerApellido}</td>\n                  <td>{cliente.segundoApellido}</td>\n                  <td>{cliente.documento ? <Link to={`documento/${cliente.documento.id}`}>{cliente.documento.nombre}</Link> : ''}</td>\n                  <td className=\"text-right\">\n                    <div className=\"btn-group flex-btn-group-container\">\n                      <Button tag={Link} to={`${match.url}/${cliente.id}`} color=\"info\" size=\"sm\">\n                        <FontAwesomeIcon icon=\"eye\" />{' '}\n                        <span className=\"d-none d-md-inline\">\n                          <Translate contentKey=\"entity.action.view\">View</Translate>\n                        </span>\n                      </Button>\n                      <Button tag={Link} to={`${match.url}/${cliente.id}/edit`} color=\"primary\" size=\"sm\">\n                        <FontAwesomeIcon icon=\"pencil-alt\" />{' '}\n                        <span className=\"d-none d-md-inline\">\n                          <Translate contentKey=\"entity.action.edit\">Edit</Translate>\n                        </span>\n                      </Button>\n                      <Button tag={Link} to={`${match.url}/${cliente.id}/delete`} color=\"danger\" size=\"sm\">\n                        <FontAwesomeIcon icon=\"trash\" />{' '}\n                        <span className=\"d-none d-md-inline\">\n                          <Translate contentKey=\"entity.action.delete\">Delete</Translate>\n                        </span>\n                      </Button>\n                    </div>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        </div>\n        <Row className=\"justify-content-center\">\n          <JhiPagination\n            items={getPaginationItemsNumber(totalItems, this.state.itemsPerPage)}\n            activePage={this.state.activePage}\n            onSelect={this.handlePagination}\n            maxButtons={5}\n          />\n        </Row>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ cliente }: IRootState) => ({\n  clienteList: cliente.entities,\n  totalItems: cliente.totalItems\n});\n\nconst mapDispatchToProps = {\n  getEntities\n};\nfunction f(r) {\n    if (r === null) {\n        return false;\n    } else {\n        return true;\n    }\n}\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Cliente);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAIA;AAMA;AAAA;AAAA;AAAA;AACA;AAQA;AACA;AAEA;AACA;AACA;AAGA;AAOA;AAEA;AACA;AACA;AACA;;AA8FA;AAtHA;AACA;AACA;AAYA;AACA;AACA;AACA;AASA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAEA;AACA;;AAAA;AAEA;AACA;;AAAA;AAEA;AACA;;AAAA;AAEA;AACA;;AAAA;AAEA;AACA;;AAAA;AAEA;AACA;;AAAA;AAEA;AAGA;AAGA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AAUA;AACA;AASA;AACA;AAAA;;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAIA;AACA;AACA;;;;;;A","sourceRoot":""}