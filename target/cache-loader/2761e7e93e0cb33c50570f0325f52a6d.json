{"remainingRequest":"C:\\Users\\agomez\\Documents\\temp\\jhipster\\JHIPSTER2\\node_modules\\thread-loader\\dist\\cjs.js??ref--4-2!C:\\Users\\agomez\\Documents\\temp\\jhipster\\JHIPSTER2\\node_modules\\ts-loader\\index.js??ref--4-3!C:\\Users\\agomez\\Documents\\temp\\jhipster\\JHIPSTER2\\node_modules\\tslint-loader\\index.js!C:\\Users\\agomez\\Documents\\temp\\jhipster\\JHIPSTER2\\src\\main\\webapp\\app\\modules\\account\\settings\\settings.reducer.ts","dependencies":[{"path":"C:\\Users\\agomez\\Documents\\temp\\jhipster\\JHIPSTER2\\src\\main\\webapp\\app\\modules\\account\\settings\\settings.reducer.ts","mtime":1560957997650},{"path":"C:\\Users\\agomez\\Documents\\temp\\jhipster\\JHIPSTER2\\node_modules\\react-hot-loader\\webpack.js","mtime":1505850161000},{"path":"C:\\Users\\agomez\\Documents\\temp\\jhipster\\JHIPSTER2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1560961486638},{"path":"C:\\Users\\agomez\\Documents\\temp\\jhipster\\JHIPSTER2\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\agomez\\Documents\\temp\\jhipster\\JHIPSTER2\\node_modules\\ts-loader\\index.js","mtime":499162500000},{"path":"C:\\Users\\agomez\\Documents\\temp\\jhipster\\JHIPSTER2\\node_modules\\tslint-loader\\index.js","mtime":1519899048000}],"contextDependencies":[],"result":["var _this = this;\r\nimport * as tslib_1 from \"tslib\";\r\nimport axios from 'axios';\r\nimport { translate, Storage } from 'react-jhipster';\r\nimport { REQUEST, SUCCESS, FAILURE } from 'app/shared/reducers/action-type.util';\r\nimport { getSession } from 'app/shared/reducers/authentication';\r\nexport var ACTION_TYPES = {\r\n    UPDATE_ACCOUNT: 'account/UPDATE_ACCOUNT',\r\n    RESET: 'account/RESET'\r\n};\r\nvar initialState = {\r\n    loading: false,\r\n    errorMessage: null,\r\n    updateSuccess: false,\r\n    updateFailure: false\r\n};\r\n// Reducer\r\nexport default (function (state, action) {\r\n    if (state === void 0) { state = initialState; }\r\n    switch (action.type) {\r\n        case REQUEST(ACTION_TYPES.UPDATE_ACCOUNT):\r\n            return tslib_1.__assign({}, state, { errorMessage: null, updateSuccess: false, loading: true });\r\n        case FAILURE(ACTION_TYPES.UPDATE_ACCOUNT):\r\n            return tslib_1.__assign({}, state, { loading: false, updateSuccess: false, updateFailure: true });\r\n        case SUCCESS(ACTION_TYPES.UPDATE_ACCOUNT):\r\n            return tslib_1.__assign({}, state, { loading: false, updateSuccess: true, updateFailure: false });\r\n        case ACTION_TYPES.RESET:\r\n            return tslib_1.__assign({}, initialState);\r\n        default:\r\n            return state;\r\n    }\r\n});\r\n// Actions\r\nvar apiUrl = 'api/account';\r\nexport var saveAccountSettings = function (account) { return function (dispatch, getState) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\r\n    return tslib_1.__generator(this, function (_a) {\r\n        switch (_a.label) {\r\n            case 0: return [4 /*yield*/, dispatch({\r\n                    type: ACTION_TYPES.UPDATE_ACCOUNT,\r\n                    payload: axios.post(apiUrl, account),\r\n                    meta: {\r\n                        successMessage: translate('settings.messages.success')\r\n                    }\r\n                })];\r\n            case 1:\r\n                _a.sent();\r\n                if (Storage.session.get(\"locale\")) {\r\n                    Storage.session.remove(\"locale\");\r\n                }\r\n                return [4 /*yield*/, dispatch(getSession())];\r\n            case 2:\r\n                _a.sent();\r\n                return [2 /*return*/];\r\n        }\r\n    });\r\n}); }; };\r\nexport var reset = function () { return ({\r\n    type: ACTION_TYPES.RESET\r\n}); };\r\n",{"version":3,"file":"C:\\Users\\agomez\\Documents\\temp\\jhipster\\JHIPSTER2\\src\\main\\webapp\\app\\modules\\account\\settings\\settings.reducer.ts","sourceRoot":"","sources":["C:\\Users\\agomez\\Documents\\temp\\jhipster\\JHIPSTER2\\node_modules\\tslint-loader\\index.js!C:\\Users\\agomez\\Documents\\temp\\jhipster\\JHIPSTER2\\src\\main\\webapp\\app\\modules\\account\\settings\\settings.reducer.ts"],"names":[],"mappings":"AAAA,iBA2EA;;AA3EA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,MAAM,gBAAgB,CAAC;AAEpD,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,sCAAsC,CAAC;AACjF,OAAO,EAAE,UAAU,EAAE,MAAM,oCAAoC,CAAC;AAEhE,MAAM,CAAC,IAAM,YAAY,GAAG;IAC1B,cAAc,EAAE,wBAAwB;IACxC,KAAK,EAAE,eAAe;CACvB,CAAC;AAEF,IAAM,YAAY,GAAG;IACnB,OAAO,EAAE,KAAK;IACd,YAAY,EAAE,IAAI;IAClB,aAAa,EAAE,KAAK;IACpB,aAAa,EAAE,KAAK;CACrB,CAAC;AAIF,UAAU;AACV,gBAAe,UAAC,KAAmC,EAAE,MAAM;IAA3C,sBAAA,EAAA,oBAAmC;IACjD,QAAQ,MAAM,CAAC,IAAI,EAAE;QACnB,KAAK,OAAO,CAAC,YAAY,CAAC,cAAc,CAAC;YACvC,4BACK,KAAK,IACR,YAAY,EAAE,IAAI,EAClB,aAAa,EAAE,KAAK,EACpB,OAAO,EAAE,IAAI,IACb;QACJ,KAAK,OAAO,CAAC,YAAY,CAAC,cAAc,CAAC;YACvC,4BACK,KAAK,IACR,OAAO,EAAE,KAAK,EACd,aAAa,EAAE,KAAK,EACpB,aAAa,EAAE,IAAI,IACnB;QACJ,KAAK,OAAO,CAAC,YAAY,CAAC,cAAc,CAAC;YACvC,4BACK,KAAK,IACR,OAAO,EAAE,KAAK,EACd,aAAa,EAAE,IAAI,EACnB,aAAa,EAAE,KAAK,IACpB;QACJ,KAAK,YAAY,CAAC,KAAK;YACrB,4BACK,YAAY,EACf;QACJ;YACE,OAAO,KAAK,CAAC;KAChB;AACH,CAAC,EAAC;AAEF,UAAU;AACV,IAAM,MAAM,GAAG,aAAa,CAAC;AAE7B,MAAM,CAAC,IAAM,mBAAmB,GAAG,UAAA,OAAO,IAAI,OAAA,UAAO,QAAQ,EAAE,QAAQ;;;oBACrE,qBAAM,QAAQ,CAAC;oBACb,IAAI,EAAE,YAAY,CAAC,cAAc;oBACjC,OAAO,EAAE,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC;oBACpC,IAAI,EAAE;wBACJ,cAAc,EAAE,SAAS,CAAC,2BAA2B,CAAC;qBACvD;iBACF,CAAC,EAAA;;gBANF,SAME,CAAC;gBAEH,IAAI,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;oBACjC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;iBAClC;gBAED,qBAAM,QAAQ,CAAC,UAAU,EAAE,CAAC,EAAA;;gBAA5B,SAA4B,CAAC;;;;KAC9B,EAd6C,CAc7C,CAAC;AAEF,MAAM,CAAC,IAAM,KAAK,GAAG,cAAM,OAAA,CAAC;IAC1B,IAAI,EAAE,YAAY,CAAC,KAAK;CACzB,CAAC,EAFyB,CAEzB,CAAC","sourcesContent":["import axios from 'axios';\r\nimport { translate, Storage } from 'react-jhipster';\r\n\r\nimport { REQUEST, SUCCESS, FAILURE } from 'app/shared/reducers/action-type.util';\r\nimport { getSession } from 'app/shared/reducers/authentication';\r\n\r\nexport const ACTION_TYPES = {\r\n  UPDATE_ACCOUNT: 'account/UPDATE_ACCOUNT',\r\n  RESET: 'account/RESET'\r\n};\r\n\r\nconst initialState = {\r\n  loading: false,\r\n  errorMessage: null,\r\n  updateSuccess: false,\r\n  updateFailure: false\r\n};\r\n\r\nexport type SettingsState = Readonly<typeof initialState>;\r\n\r\n// Reducer\r\nexport default (state: SettingsState = initialState, action): SettingsState => {\r\n  switch (action.type) {\r\n    case REQUEST(ACTION_TYPES.UPDATE_ACCOUNT):\r\n      return {\r\n        ...state,\r\n        errorMessage: null,\r\n        updateSuccess: false,\r\n        loading: true\r\n      };\r\n    case FAILURE(ACTION_TYPES.UPDATE_ACCOUNT):\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        updateSuccess: false,\r\n        updateFailure: true\r\n      };\r\n    case SUCCESS(ACTION_TYPES.UPDATE_ACCOUNT):\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        updateSuccess: true,\r\n        updateFailure: false\r\n      };\r\n    case ACTION_TYPES.RESET:\r\n      return {\r\n        ...initialState\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// Actions\r\nconst apiUrl = 'api/account';\r\n\r\nexport const saveAccountSettings = account => async (dispatch, getState) => {\r\n  await dispatch({\r\n    type: ACTION_TYPES.UPDATE_ACCOUNT,\r\n    payload: axios.post(apiUrl, account),\r\n    meta: {\r\n      successMessage: translate('settings.messages.success')\r\n    }\r\n  });\r\n\r\n  if (Storage.session.get(`locale`)) {\r\n    Storage.session.remove(`locale`);\r\n  }\r\n\r\n  await dispatch(getSession());\r\n};\r\n\r\nexport const reset = () => ({\r\n  type: ACTION_TYPES.RESET\r\n});\r\n"]}]}